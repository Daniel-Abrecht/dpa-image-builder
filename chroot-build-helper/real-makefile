include ../src/make-helper-functions.mk
include $(GENERATED_DEPENDENCIES_FILE)

UEXEC=../build/bin/uexec

all: $(patsubst %,bin/$(BUILDER_PLATFORM)/$(DISTRO)/$(RELEASE)/%/.build,$(PACKAGES_TO_BUILD))
repo: $(addprefix repo//,$(PACKAGES_TO_BUILD))

build//%: DONT_BUILD_IF_IN_REPO=no
build//%: bin/$(BUILDER_PLATFORM)/$(DISTRO)/$(RELEASE)/%/.build
	@true

build-env/$(DISTRO)/$(RELEASE)/deb/%.deb: build-env/$(DISTRO)/$(RELEASE)/deb/.dir
	getdeb.sh "$@"

build-env/$(DISTRO)/$(RELEASE)/debootstrap/usr/share/debootstrap/scripts/$(RELEASE): build-env/$(DISTRO)/$(RELEASE)/deb/debootstrap.deb
	set -e; \
	rm -rf "build-env/$(DISTRO)/$(RELEASE)/debootstrap/"; \
	mkdir -p "build-env/$(DISTRO)/$(RELEASE)/debootstrap/"; \
	cd "build-env/$(DISTRO)/$(RELEASE)/debootstrap/"; \
	ar x ../deb/debootstrap.deb; \
	tar xzf data.tar.*;
	[ -e "$@" ]
	touch "$@"

$(UEXEC):
	make -C .. build/bin/usernsexec

$(DEBOOTSTRAP_SCRIPT):
	make -C .. "$(DEBOOTSTRAP_SCRIPT)"

build-env/$(DISTRO)/$(RELEASE)/rootfs: build-env/.dir | $(DEBOOTSTRAP_SCRIPT) $(UEXEC)
	mkdir -p "$@.tmp"
	uexec rm -rf "$@.tmp"
	debootstrap-base.sh "$@.tmp"
	CHROOT_REPO="$$REPO" getrfsfile.sh "rootfs/etc/apt/sources.list" >"$@.tmp/etc/apt/sources.list"
	chns "$@.tmp" apt-get -y update
	if [ -n "$(BUILD_DEP_RELEASE)" ]; \
	  then chns "$@.tmp" apt-get -y -t "$(BUILD_DEP_RELEASE)" install --no-install-recommends build-essential dh-make debhelper devscripts meson wget gnupg2 gawk $(EXTRA_BUILD_TOOLS); \
	  else chns "$@.tmp" apt-get -y install --no-install-recommends build-essential dh-make debhelper devscripts meson wget gnupg2 gawk $(EXTRA_BUILD_TOOLS); \
	fi
	if [ -f "$@" ]; then mv "$@" "$@.old"; fi
	mv "$@.tmp" "$@"
	uexec rm -rf "$@.old"

repo-add//%:
	set -x; \
	cd "bin/$(BUILDER_PLATFORM)/$(DISTRO)/$(RELEASE)/$(patsubst repo-add//%,%,$@)/"; \
	name="$$(printf '%s' *.changes)"; \
	addrepo.sh "$$name"

clean-repo: $(addprefix clean-repo//,$(PACKAGES_TO_BUILD))
update-repo: $(addprefix update-repo//,$(PACKAGES_TO_BUILD))

clean-buildenv: | $(UEXEC)
	uexec rm -rf "build-env/$(DISTRO)/$(RELEASE)"
	rmdir "build-env/$(DISTRO)/" || true
	rm -f "build-env/.dir"
	rmdir "build-env/" || true

clean-bin:
	rm -rf "bin/$(BUILDER_PLATFORM)/$(DISTRO)/$(RELEASE)"
	rmdir bin/$(BUILDER_PLATFORM)/$(DISTRO)/ || true
	rmdir bin/$(BUILDER_PLATFORM)/ || true
	rmdir bin || true

clean-build: clean-buildenv clean-bin

clean-build-all:
	uexec rm -rf "build-env/" "bin/"

.SECONDEXPANSION:
bin/$(BUILDER_PLATFORM)/$(DISTRO)/$(RELEASE)/%/.build: $$(call repodir,%) build-env/$(DISTRO)/$(RELEASE)/rootfs | $(UEXEC) bin/$(BUILDER_PLATFORM)/$(DISTRO)/$(RELEASE)/%/.dir
	DO_LOCK=2 chns "build-env/$(DISTRO)/$(RELEASE)/rootfs/" sh -ex -c "apt-get -y update && apt-get -y dist-upgrade" || true; \
	# If repo is needed & packages to be built for it, make sure it's created if necessary
	if [ "$(USE_IMAGE_BUILDER_REPO)" = yes ] && [ -n "$(IMAGE_BUILDER_REPO)" ] && [ -n "$(IMAGE_BUILDER_REPO_KEY)" ] && [ "$(ADD_TO_EXTERNAL_REPO)" = "yes" ]; then addrepo.sh; fi
	project="$(patsubst bin/$(BUILDER_PLATFORM)/$(DISTRO)/$(RELEASE)/%/.build,%,$@)" \
	branch="$(repo-branch@$(patsubst bin/$(BUILDER_PLATFORM)/$(DISTRO)/$(RELEASE)/%/.build,%,$@))" \
	repodir="$(call repodir,$(patsubst bin/$(BUILDER_PLATFORM)/$(DISTRO)/$(RELEASE)/%/.build,%,$@))" \
	CHNS_OVERLAY=1 \
	CHNS_EXTRA="( \
	  set -x; \
	  mkdir -p tmp/repo/pool/ build/; \
	  mount -o rbind,rprivate \"\$$project_root/chroot-build-helper/bin/\$$BUILDER_PLATFORM/\$$DISTRO/\$$RELEASE/\" tmp/repo/pool/; \
	  git clone --shared -b \"\$$branch\" \"$$project_root/\$$repodir\" build/src; \
	); \
	export commit=\"\$$(cd build/src/ && git rev-parse HEAD)\$$([ -z \"\$$(cd build/src/ && git status --porcelain)\" ] || echo -dirty)\"; \
	export version=\"\$$(cd build/src/ && dpkg-parsechangelog --show-field Version | grep -o '^[^+~-]*' | tr -d '\n')+ib~c\$$(cd build/src/ && git rev-list HEAD --count)-\$$commit\"; \
	" \
	chns "build-env/$(DISTRO)/$(RELEASE)/rootfs/" sh -ex -c "\
	  if [ \"\$$USE_IMAGE_BUILDER_REPO\" = yes ] && [ \"\$$DONT_BUILD_IF_IN_REPO\" = yes ] && [ -n \"\$$IMAGE_BUILDER_REPO\" ] && [ -n \"\$$IMAGE_BUILDER_REPO_KEY\" ]; \
	  then \
	    wget -O- \"\$$IMAGE_BUILDER_REPO_KEY\" | apt-key add -; \
	    printf '%s' \"\$$IMAGE_BUILDER_REPO\" >/etc/apt/sources.list.d/dpa-image-builder.list; \
	  fi; \
	  ( \
	    cd /tmp/repo/; \
	    dpkg-scanpackages -m pool > Packages; \
	    gzip -k Packages; \
	    xz -k Packages; \
	  ); \
	  echo \"deb [trusted=yes] file:///tmp/repo/ ./\" >\"/etc/apt/sources.list.d/devrepo.list\"; \
	  apt-get -y update && apt-get -y dist-upgrade; \
	  cd /build/src/; \
	  if [ \"\$$DONT_BUILD_IF_IN_REPO\" = yes ] \
	    && ( \
	      for package in \$$(gawk 'BEGIN{RS=\"\\n\\n\";FS=\"\\n\"}{ if (\$$0 ~ /\\nArchitecture:.* (arm64|any|all).*\\n/ && \$$1 ~ /Package:/) { match(\$$1, /Package: *([^ ]*) */, package); print package[1] } }' <debian/control); \
	        do if apt-cache show \"\$$package=\$$version\" >/dev/null 2>&1; then exit 0; fi; \
	      done; \
	      exit 1; \
	    ); \
	    then echo 'Not building package, this version is already in the repo, and DONT_BUILD_IF_IN_REPO is set to yes'; exit 0; \
	  fi; \
	  dch -b -D \"\$$DISTRO-\$$RELEASE\" --force-distribution -v \"\$$version\" \"Version suffix automatically added by dpa-image-builder. Git commit \$$commit.\"; \
	  apt-get -y build-dep .; \
	  if [ \"$(DO_BUILD_SOURCE_PACKAGES)\" = yes ]; \
	    then debuild -us -uc; \
	    else debuild -b -us -uc; \
	  fi; \
	  mkdir -p \"/tmp/repo/pool/\$$project/\"; \
	  rm -f \"/tmp/repo/pool/\$$project/\"*; \
	  find .. -maxdepth 1 -type f -exec cp {} \"/tmp/repo/pool/\$$project/\" ';' -print; \
	"
	if [ "$(ADD_TO_EXTERNAL_REPO)" = "yes" ]; \
	  then make -f real-makefile "repo-add//$(patsubst bin/$(BUILDER_PLATFORM)/$(DISTRO)/$(RELEASE)/%/.build,%,$@)" || true; \
	fi
	touch "$@"
